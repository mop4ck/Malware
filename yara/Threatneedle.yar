import "pe"

rule Lazarus_ThreatNeedle_decryption : Lazarus Threatneedle Decryption XOR
{
    meta:
    author        = "FSICEAT_MHPARK <mop4ck@gmail.com>"
    type          = "APT"
    version       = "0.5"
    date          = "2020-03-31"
    update        = "2020-04-01"
    sha1          = "451ad26a41a8b8ae82ccfc850d67b12289693b227a7114121888b444d72d4727"
    description   = "Detects ThreatNeedle used by Lazarus, searching for 1-byte xor and 1-byte offset decryption."
      
    strings:
    // $lib_FindResourceA = "FindResourceA"
    // $lib_LoadResource = "LoadResource"
    // $lib_SizeofResource = "SizeofResource"
    // $lib_URLDownloadToFileA = "URLDownloadToFileA"
    // $lib_WinExec = "WinExec"
    // $lib_CryptAcquireContextW = "CryptAcquireContextW"
    // $lib_CryptHashData = "CryptHashData"
    // $lib_CryptEncrypt = "CryptEncrypt"

    $decrypt_offset = {66 8B ?? ?? [1-4] 0F B7 ?? [0-4] 83 C? ?? 66 89 ?? ?? [1-4] 4? 83 F? ?? 72}
    // 010D2ED0 | 66:8B844D 14FFFFFF       | mov ax,word ptr ss:[ebp+ecx*2-EC]       |
    // 010D2ED8 | 0FB7C0                   | movzx eax,ax                            |
    // 010D2EDB | 83C0 F4                  | add eax,FFFFFFF4                        |
    // 010D2EDE | 66:89844D 14FFFFFF       | mov word ptr ss:[ebp+ecx*2-EC],ax       |
    // 010D2EE6 | 41                       | inc ecx                                 |
    // 010D2EE7 | 83F9 59                  | cmp ecx,59                              | 59:'Y'
    // 010D2EEA | 72 E4                    | jb citrix.10D2ED0   

    $decrypt_offset_increment = {8A 8? ?? ?? ?? FF FF 0F ?? ?? 83 ?? ?? 88 8? ?? ?? ?? FF FF 4? 83 F? ?? 72}
    // .text:00408450 8A 84 0D C0 FB FF FF                    mov     al, [ebp+ecx+var_440]
    // .text:00408457 0F BE C0                                movsx   eax, al
    // .text:0040845A 83 E8 09                                sub     eax, 9
    // .text:0040845D 88 84 0D C0 FB FF FF                    mov     [ebp+ecx+var_440], al
    // .text:00408464 41                                      inc     ecx
    // .text:00408465 83 F9 18                                cmp     ecx, 18h
    // .text:00408468 72 E6                                   jb      short loc_408450
 
    $decrypt_xor = {66 8B ?? ?? [1-4] 0F B7 ?? [0-4] 33 ?? 66 89 ?? ?? [1-4] 4? 83 F? ?? 72}
    // 010D3020 | 66:8B4C45 CC             | mov cx,word ptr ss:[ebp+eax*2-34]       |
    // 010D3025 | 0FB7D1                   | movzx edx,cx                            |
    // 010D3028 | 0FB74D C8                | movzx ecx,word ptr ss:[ebp-38]          |
    // 010D302C | 33D1                     | xor edx,ecx                             |
    // 010D302E | 66:895445 CC             | mov word ptr ss:[ebp+eax*2-34],dx       |
    // 010D3033 | 40                       | inc eax                                 |
    // 010D3034 | 83F8 17                  | cmp eax,17                              |
    // 010D3037 | 72 E7                    | jb citrix.10D3020    
    
    $decrypt_xor_increment = {8A ?? ?? ?? 8B ?? ?? 02 ?? 0F ?? ?? 33 ?? 88 54 ?? ?? 4? 83 F? ?? 72}
    // 010D31A0 | 8A4C05 E8                | mov cl,byte ptr ss:[ebp+eax-18]         |
    // 010D31A4 | 8B55 E4                  | mov edx,dword ptr ss:[ebp-1C]           |
    // 010D31A7 | 02D0                     | add dl,al                               |
    // 010D31A9 | 0FBEC9                   | movsx ecx,cl                            |
    // 010D31AC | 33D1                     | xor edx,ecx                             |
    // 010D31AE | 885405 E8                | mov byte ptr ss:[ebp+eax-18],dl         |
    // 010D31B2 | 40                       | inc eax                                 |
    // 010D31B3 | 83F8 13                  | cmp eax,13                              |
    // 010D31B6 | 72 E8                    | jb citrix.10D31A0    

    $decrypt_xor_offset_increment = {66 8B ?? ?? ?? ?? FF FF 8B 8? ?? ?? FF FF 03 ?? 0F ?? ?? 33 ?? 66 89 ?? ?? ?? ?? FF FF 4? 83 ?? ?? 72}
    // .text:004079B0 66 8B 84 55 AC FB FF FF                 mov     ax, [ebp+edx*2+szVerb]
    // .text:004079B8 8B 8D A8 FB FF FF                       mov     ecx, [ebp+var_458]
    // .text:004079BE 03 CA                                   add     ecx, edx
    // .text:004079C0 0F B7 C0                                movzx   eax, ax
    // .text:004079C3 33 C8                                   xor     ecx, eax
    // .text:004079C5 66 89 8C 55 AC FB FF FF                 mov     [ebp+edx*2+szVerb], cx
    // .text:004079CD 42                                      inc     edx
    // .text:004079CE 83 FA 09                                cmp     edx, 9
    // .text:004079D1 72 DD                                   jb      short loc_4079B0

    condition:
    uint16(0) == 0x5A4D
    and 2 of ($decrypt_*)
}


rule Lazarus_ThreatNeedle_Magic : Lazarus Threatneedle Hardcoded RC4
{
    meta:
    author        = "FSICEAT_MHPARK"
    type          = "TROJAN"
    version       = "0.4"
    date          = "2020-03-31"
    update        = "2020-04-01"
    sha1          = "451ad26a41a8b8ae82ccfc850d67b12289693b227a7114121888b444d72d4727"
    description   = "Detects ThreatNeedle used by Lazarus, searching for Hardcoded Hex values."

    strings:
    $magic_1 = {98 9D D4 60}
    // Magic Number for C2 Traffic (Client -> Server)

    $magic_2 = {94 9D D4 60}
    // Magic Number for C2 Traffic (Server -> Client)
    
    $magic_3 = {99 9D D4 60}
    // Magic Number for C2 Traffic (Client -> Server)

    $magic_4 = {A3 D5 00 00}
    // Key for CryptDeriveKey which derives the RC4 En/Decryption Key for C2 Traffic

    condition:
    uint16(0) == 0x5A4D
    and 3 of ($magic_*)

}


rule Lazarus_ThreatNeedle_http : Lazarus Threatneedle Hardcoded
{
    meta:
    author        = "FSICEAT_MHPARK"
    type          = "TROJAN"
    version       = "0.1"
    date          = "2020-04-01"
    update        = "2020-04-01"
    sha1          = "451ad26a41a8b8ae82ccfc850d67b12289693b227a7114121888b444d72d4727"
    description   = "Detects ThreatNeedle used by Lazarus, searching for Hardcoded HTTP Body format strings."

    strings:
    $user_agent = {4D 00 6F 00 7A 00 69 00 6C 00 6C 00 61 00 2F 00 35 00 2E 00 30 00 20 00 28 00 63 00 6F 00 6D 00 70 00 61 00 74 00 69 00 62 00 6C 00 65 00 3B 00 20 00 4D 00 53 00 49 00 45 00 20 00 31 00 30 00 2E 00 30 00 3B 00 20 00 57 00 69 00 6E 00 64 00 6F 00 77 00 73 00 20 00 4E 00 54 00 20 00 36 00 2E 00 31 00 3B 00 20 00 57 00 4F 00 57 00 36 00 34 00 3B 00 20 00 54 00 72 00 69 00 64 00 65 00 6E 00 74 00 2F 00 36 00 2E 00 30 00 29}
    $body_1 = "jsessid=%08x%08x%08x"
    $body_2 = "%04x%04x%04x%04x"

    condition:
    uint16(0) == 0x5A4D
    and $user_agent
    and any of ($body_*)

}

rule Lazarus_ThreatNeedle_certificate : Lazarus Threatneedle Certificate
{
    meta:
    author        = "FSICEAT_MHPARK"
    type          = "TROJAN"
    version       = "0.1"
    date          = "2020-04-01"
    update        = "2020-04-01"
    sha1          = "451ad26a41a8b8ae82ccfc850d67b12289693b227a7114121888b444d72d4727"
    description   = "Detects ThreatNeedle used by Lazarus, searching for Code sigining certificate."

    condition:
    uint16(0) == 0x5A4D
    and for any i in (0..pe.number_of_signatures - 1):
    (
        pe.signatures[i].subject contains "2 TOY GUYS LLC"
        or pe.signatures[i].serial == "00:81:86:31:11:0b:5d:14:33:1d:ac:7e:6a:d9:98:b9:02"
    )
}
